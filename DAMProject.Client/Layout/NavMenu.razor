@inject IAuthService AuthService
@inject NavigationManager NavigationManager

 <Bar Mode="BarMode.VerticalInline"
	  CollapseMode="BarCollapseMode.Small"
	  Breakpoint="Breakpoint.Desktop"
	  NavigationBreakpoint="Breakpoint.Tablet"
	  ThemeContrast="ThemeContrast.Dark">
	<BarToggler/>
	<BarBrand>
		<BarItem>
			<BarLink To="home">
				<BarIcon IconName="IconName.Dashboard"/>
				DAMproject
			</BarLink>
		</BarItem>
	</BarBrand>
	<BarMenu>
		<BarStart>
			@if (authenticationStatus.IsAuthenticated)
			{
				@if (authenticationStatus.Role == "Admin")
				{
					<BarItem>
						<BarLink To="users">
							<BarIcon IconName="IconName.UserFriends" /> Users
						</BarLink>
					</BarItem>
					<BarItem>
						<BarLink To="books">
							<BarIcon IconName="IconName.Book" /> Books
						</BarLink>
					</BarItem>
					<BarItem>
						<BarLink To="authors">
							<BarIcon IconName="IconName.UserTie" /> Authors
						</BarLink>
					</BarItem>
					<BarItem>
						<BarLink To="genres">
							<BarIcon IconName="IconName.Tag" /> Genres
						</BarLink>
					</BarItem>
					<BarItem>
						<BarLink To="series">
							<BarIcon IconName="IconName.LayerGroup" /> Series
						</BarLink>
					</BarItem>
					<BarItem>
						<BarLink To="publishers">
							<BarIcon IconName="IconName.Building" /> Publishers
						</BarLink>
					</BarItem>
					<BarItem>
						<BarLink To="favorites">
							<BarIcon IconName="IconName.Heart" /> Favorites
						</BarLink>
					</BarItem>
					<BarItem>
						<BarLink To="score">
							<BarIcon IconName="IconName.Star" /> Score
						</BarLink>
					</BarItem>
				}

				@if (authenticationStatus.Role == "User")
				{
					<BarItem>
						<BarLink To="book-details">
							<BarIcon IconName="IconName.BookReader" /> Book Details
						</BarLink>
					</BarItem>
					<BarItem>
						<BarLink To="book-favorites">
							<BarIcon IconName="IconName.Heart" /> Favorites
						</BarLink>
					</BarItem>
				}
			}
		</BarStart>
		<BarEnd>
			<BarItem Alignment="BarAlignment.End">
				@if (authenticationStatus.IsAuthenticated)
				{
					<Div Display="Display.Flex" Flex="Flex.AlignItems.Center.JustifyContent.End">
					<Button Color="Color.Danger" Clicked="OnLogoutClicked" Class="d-flex align-items-center m-2">
						<Icon Name="IconName.Lock" /> 
					</Button>
					</Div>
				}
			</BarItem>
		</BarEnd>
	</BarMenu>
 </Bar>

@code {
	private AuthenticationStatus authenticationStatus = new AuthenticationStatus { IsAuthenticated = false };

	protected override async Task OnInitializedAsync()
	{
		authenticationStatus = await AuthService.GetAuthenticationStatus();
		NavigationManager.LocationChanged += OnLocationChanged;
	}

	private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		authenticationStatus = await AuthService.GetAuthenticationStatus();
		StateHasChanged();
	}

	private async Task OnLogoutClicked()
	{
		await AuthService.Logout();
		NavigationManager.NavigateTo("login", true);
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= OnLocationChanged; 
	}
}

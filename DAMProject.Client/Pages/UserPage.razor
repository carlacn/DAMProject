@page "/users"
@using DAMProject.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Users</PageTitle>

<DataGrid TItem="User"
          Data="@users"
          @bind-SelectedRow="@selectedUser"
          Editable
          Responsive
          ShowPager
          CommandMode="DataGridCommandMode.ButtonRow"
          EditMode="DataGridEditMode.Popup"
          RowUpdated="RowUpdated"
          RowRemoved="RowRemoved"
          RowInserted="RowInserted">
    <DataGridColumns>
        <DataGridCommandColumn NewCommandAllowed="true" EditCommandAllowed="true" DeleteCommandAllowed="true" CancelCommandAllowed="true">
            <SaveCommandTemplate>
                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn TItem="User" Field="Id" Caption="Id" Editable="false" />
        <DataGridColumn TItem="User" Field="Name" Caption="Name" Editable="true" />
        <DataGridColumn TItem="User" Field="Email" Caption="Email" Editable="true" />
        <DataGridColumn TItem="User" Field="Password" Caption="Password" Editable="true" />
        <DataGridColumn TItem="User" Field="Role" Caption="Role" Editable="true" >
            <EditTemplate>
                <Select TValue="int" SelectedValue="@((int)context.CellValue)"
                        SelectedValueChanged="@(v=>context.CellValue=v)">
                    <SelectItem Value="0">User</SelectItem>
                    <SelectItem Value="1">Admin</SelectItem>
                </Select>
            </EditTemplate>
        </DataGridColumn>
    </DataGridColumns>

    <ButtonRowTemplate>
        <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
        <Button Color="Color.Primary" Disabled="(selectedUser is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
        <Button Color="Color.Danger" Disabled="(selectedUser is null)" Clicked="context.DeleteCommand.Clicked">Delete</Button>
        <Button Color="Color.Link" Clicked="context.ClearFilterCommand.Clicked">Clear Filter</Button>
    </ButtonRowTemplate>
</DataGrid>

@code {
    private List<User>? users;
    private User selectedUser;

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<User>>("api/user");
    }

    private async Task RowInserted(SavedRowItem<User, Dictionary<string, object>> e)
    {
        var newUser = e.Item;
        if (newUser.CreatedAt == default)
        {
            newUser.CreatedAt = DateTime.Now;
        }
        var registerRequest = new RegisterRequest
            {
                Name = newUser.Name,
                Email = newUser.Email,
                Password = newUser.Password,
                Role = newUser.Role
            };

        var response = await Http.PostAsJsonAsync("api/auth/Register", registerRequest);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private async Task RowUpdated(SavedRowItem<User, Dictionary<string, object>> e)
    {
        var user = e.Item;
        var response = await Http.PutAsJsonAsync($"api/user/{user.Id}", user);
        if (!response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private async Task RowRemoved(User user)
    {
        var response = await Http.DeleteAsync($"api/user/{user.Id}");
        if (response.IsSuccessStatusCode)
        {
            users.Remove(user);
        }
    }
}

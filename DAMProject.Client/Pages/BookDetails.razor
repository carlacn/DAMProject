@page "/book-details"
@using DAMProject.Shared.Models
@inject HttpClient Http

<Layout>
    <LayoutContent>
        <div class="d-flex justify-content-center my-3">
            <Bar Background="Background.White" ThemeContrast="ThemeContrast.Light">
                <BarStart>
                    <BarItem>
                        <TextEdit Placeholder="Search by title..."
                                  Immediate="true" 
                                  Icon="IconName.Search"
                                  TextChanged="@(async (text) => await FilterBooks(text))" />
                    </BarItem>
                </BarStart>
            </Bar>
        </div>

        <div class="container">
            <div class="row mt-3">
                @if (filteredBooks != null && filteredBooks.Any())
                {
                    @foreach (var book in filteredBooks)
                    {
                        <div class="col-12 mb-3">
                            <Card>
                                <CardImage Src="@book.Image" Alt="Book Image" />
                                <CardBody>
                                    <CardTitle>@book.Title</CardTitle>
                                    <Button Color="Color.Primary" Margin="Margin.Is2.FromTop" Clicked="@(() => ShowBookDetails(book.Id))">
                                        <Icon Name="IconName.Eye" />
                                    </Button>
                                </CardBody>
                            </Card>
                        </div>
                    }
                }
                else
                {
                    <p>No books were found.</p>
                }
            </div>
        </div>
    </LayoutContent>
</Layout>

@if (showModal && selectedBook != null)
{
    <Modal Visible="true" Toggled="@CloseModal">
        <ModalContent Centered>
            <ModalBody>
                <Card>
                    <CardImage Src="@selectedBook.Image" Alt="Book Image" />
                    <CardBody>
                        <CardTitle>@selectedBook.Title</CardTitle>
                        <CardText>Genre: @selectedBook.Genre</CardText>
                        <CardText>Comments: @selectedBook.Comments</CardText>
                        <CardText>Publisher: @selectedBook.Publisher</CardText>
                        <CardText>Saga: @selectedBook.Series</CardText>
                    </CardBody>
                </Card>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Warning" Clicked="@(() => ShowScoresModal())">
                    <Icon Name="IconName.Star" Color="Color.White"/>
                </Button>
                <Button Color="Color.Danger" Clicked="@(() => ShowFavoritesModal())">
                    <Icon Name="IconName.Heart" Color="Color.White"/>
                </Button>
                <Button Color="Color.Primary" Clicked="CloseModal">
                    <Icon Name="IconName.Times" Color="Color.White"/>
                </Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@if (showFavoritesModal)
{
    <Modal Visible="true" Toggled="@CloseFavoritesModal">
        <ModalContent Centered>
            <ModalBody>
                <h4>Agregar a Favoritos</h4>
                <div class="form-group mb-3">
                    <label>Format:</label>
                    <Select @bind-SelectedValue="@favoriteFormat" TValue="int" Class="form-select">
                        <SelectItem Value="0">Digital</SelectItem>
                        <SelectItem Value="1">Physical</SelectItem>
                    </Select>
                </div>
                <div class="form-group mb-3">
                    <label>Status:</label>
                    <Select @bind-SelectedValue="@favoriteStatus" TValue="int" Class="form-select">
                        <SelectItem Value="0">Pending</SelectItem>
                        <SelectItem Value="1">Read</SelectItem>
                        <SelectItem Value="2">Current Read</SelectItem>
                        <SelectItem Value="3">Abandoned</SelectItem>
                    </Select>
                </div>
                <div class="form-group mb-3">
                    <label>Read Date:</label>
                    <DateEdit @bind-Date="favoriteReadDate" Class="form-control" />
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="@SaveFavorite">
                    Guardar
                </Button>
                <Button Color="Color.Secondary" Clicked="@CloseFavoritesModal">
                    Cancelar
                </Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@if (showScoresModal)
{
    <Modal Visible="true" Toggled="@CloseScoresModal">
        <ModalContent Centered>
            <ModalBody>
                <h4>Agregar Puntuación</h4>
                <div class="form-group mb-3">
                    <label>Puntuación:</label>
                    <div>
                        @for (int i = 1; i <= 5; i++)
                        {
                            <Button Color="@(i <= userScore ? Color.Warning : Color.Light)" Class="me-1">
                                <Icon Name="IconName.Star" /> @i
                            </Button>
                        }
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label>Comentario:</label>
                    <InputTextArea @bind-Value="userComment" Class="form-control" Rows="3" Placeholder="Añade tu comentario aquí..." />
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary">
                    Guardar
                </Button>
                <Button Color="Color.Secondary" Clicked="@CloseScoresModal">
                    Cancelar
                </Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}


@code {
    private List<BookDetailsDTO>? books;
    private List<BookDetailsDTO>? filteredBooks;
    private BookDetailsDTO? selectedBook;
    private bool showModal = false;
    private bool showFavoritesModal = false;
    private bool showScoresModal = false;

    private string searchTerm = "";

    private int favoriteFormat = 0;
    private int favoriteStatus = 0;
    private DateTime favoriteReadDate = DateTime.Today;

    private int userScore = 0;  
    private string userComment = ""; 

    protected override async Task OnInitializedAsync()
    {
        books = await Http.GetFromJsonAsync<List<BookDetailsDTO>>("api/book/details");
        filteredBooks = books;
    }

    private async Task ShowBookDetails(int bookId)
    {
        selectedBook = books.Where(book => book.Id == bookId).FirstOrDefault();
        if (selectedBook != null)
        {
            showModal = true;
        }
    }

    private void CloseModal()
    {
        showModal = false;
        selectedBook = null;
    }

    private void ShowFavoritesModal()
    {
        showFavoritesModal = true;
    }

    private void CloseFavoritesModal()
    {
        showFavoritesModal = false;
    }


    private async Task SaveFavorite()
    {
        if (selectedBook == null)
            return;

        var favorite = new Favorites
            {
                BookId = selectedBook.Id,
                Format = (Format)favoriteFormat,
                Status = (Status)favoriteStatus,
                ReadDate = favoriteReadDate
            };

        var response = await Http.PostAsJsonAsync("api/favorites", favorite);

        if (response.IsSuccessStatusCode)
        {
            await FilterBooks(searchTerm);
        }

        CloseFavoritesModal();
    }

    private void ShowScoresModal()
    {
        showScoresModal = true;
    }

    private void CloseScoresModal()
    {
        showScoresModal = false;
    }

    private async Task FilterBooks(string text)
    {
        searchTerm = text;
        filteredBooks = string.IsNullOrWhiteSpace(searchTerm)
            ? books
            : books?.Where(b => b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

}

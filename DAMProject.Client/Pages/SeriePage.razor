@page "/series"
@using DAMProject.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Serie</PageTitle>

<DataGrid TItem="Serie"
          Data="@serieList"
          @bind-SelectedRow="@selectedSerie"
          Editable
          Responsive
          ShowPager
          CommandMode="DataGridCommandMode.ButtonRow"
          EditMode="DataGridEditMode.Popup"
          RowUpdated="RowUpdated"
          RowRemoved="RowRemoved"
          RowInserted="RowInserted">
    <DataGridColumns>
        <DataGridCommandColumn NewCommandAllowed="true" EditCommandAllowed="true" DeleteCommandAllowed="true" CancelCommandAllowed="true">
            <SaveCommandTemplate>
                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn TItem="Serie" Field="Id" Caption="Id" Editable="false" />
        <DataGridColumn TItem="Serie" Field="Name" Caption="Name" Editable="true" />
        <DataGridColumn TItem="Serie" Field="Description" Caption="Description" Editable="true" />
    </DataGridColumns>

    <ButtonRowTemplate>
        <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
        <Button Color="Color.Primary" Disabled="(selectedSerie is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
        <Button Color="Color.Danger" Disabled="(selectedSerie is null)" Clicked="context.DeleteCommand.Clicked">Delete</Button>
        <Button Color="Color.Link" Clicked="context.ClearFilterCommand.Clicked">Clear Filter</Button>
    </ButtonRowTemplate>
</DataGrid>

@code {
    private List<Serie>? serieList;
    private Serie selectedSerie;

    protected override async Task OnInitializedAsync()
    {
        serieList = await Http.GetFromJsonAsync<List<Serie>>("api/Serie");
    }

    private async Task RowInserted(SavedRowItem<Serie, Dictionary<string, object>> e)
    {
        var newSerie = e.Item;
        var response = await Http.PostAsJsonAsync("api/Serie", newSerie);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private async Task RowUpdated(SavedRowItem<Serie, Dictionary<string, object>> e)
    {
        var serie = e.Item;
        var response = await Http.PutAsJsonAsync($"api/Serie/{serie.Id}", serie);
        if (!response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private async Task RowRemoved(Serie serie)
    {
        var response = await Http.DeleteAsync($"api/Serie/{serie.Id}");
        if (response.IsSuccessStatusCode)
        {
            serieList.Remove(serie);
        }
    }
}

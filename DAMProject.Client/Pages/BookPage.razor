 @page "/books"
@using DAMProject.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Books</PageTitle>

<DataGrid TItem="Book"
          Data="@bookList"
          @bind-SelectedRow="@selectedBook"
          Editable
          Responsive
          ShowPager
          CommandMode="DataGridCommandMode.ButtonRow"
          EditMode="DataGridEditMode.Popup"
          RowUpdated="RowUpdated"
          RowRemoved="RowRemoved"
          RowInserted="RowInserted">
    <DataGridColumns>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false" CancelCommandAllowed>
            <SaveCommandTemplate>
                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>

        <DataGridColumn TItem="Book" Field="Id" Caption="Id" Editable="false" />
        <DataGridColumn TItem="Book" Field="Title" Caption="Title" Editable="true" />
        <DataGridColumn TItem="Book"  Field="GenreId" Caption="Genre" Editable="true">
            <DisplayTemplate Context="Book">
                @genres.FirstOrDefault(g => g.Id == Book.GenreId)?.Name
            </DisplayTemplate>
            <EditTemplate Context="context">
                <Select TValue="int" SelectedValue="@((int)context.CellValue)"
                        SelectedValueChanged="@((int value) => context.CellValue = value)">
                    @foreach (var genre in genres)
                    {
                        <SelectItem Value="@genre.Id">@genre.Name</SelectItem>
                    }
                </Select>
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="Book" Field="PublisherId" Caption="Publisher" Editable="true">
            <DisplayTemplate Context="Book">
                @publishers.FirstOrDefault(p => p.Id == Book.PublisherId)?.Name
            </DisplayTemplate>
            <EditTemplate Context="context">
                <Select TValue="int" SelectedValue="@((int)context.CellValue)"
                        SelectedValueChanged="@((int value) => context.CellValue = value)">
                    @foreach (var publisher in publishers)
                    {
                        <SelectItem Value="@publisher.Id">@publisher.Name</SelectItem>
                    }
                </Select>
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="Book" Field="SeriesId" Caption="Series" Editable="true">
            <DisplayTemplate Context="Book">
                @seriesList.FirstOrDefault(s => s.Id == Book.SeriesId)?.Name
            </DisplayTemplate>
            <EditTemplate Context="context">
                <Select TValue="int" SelectedValue="@((int)context.CellValue)"
                        SelectedValueChanged="@((int value) => context.CellValue = value)">
                    @foreach (var serie in seriesList)
                    {
                        <SelectItem Value="@serie.Id">@serie.Name</SelectItem>
                    }
                </Select>
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="Book" Field="Comments" Caption="Comments" Editable="true" />

        <DataGridColumn TItem="Book" Field="Image" Caption="Image" Editable>
            <EditTemplate>
                <div class="w-100">
                    <FileEdit Changed="@OnChanged" Style="width: 100%;" Filter="image/*" AutoReset="false"/>
                </div>
            </EditTemplate>
            <DisplayTemplate Context="Book">
                <img src="@Book.Image" alt="Book Image" width="100" height="100" />
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>

    <ButtonRowTemplate>
        <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
        <Button Color="Color.Primary" Disabled="(selectedBook is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
        <Button Color="Color.Danger" Disabled="(selectedBook is null)" Clicked="context.DeleteCommand.Clicked">Delete</Button>
        <Button Color="Color.Link" Clicked="context.ClearFilterCommand.Clicked">Clear Filter</Button>
    </ButtonRowTemplate>
</DataGrid>

@code {
    private List<Book>? bookList;
    private Book selectedBook;

    private List<Genre> genres = new();
    private List<Publisher> publishers = new();
    private List<Serie> seriesList = new();

    private string fileContent;
    private IFileEntry fileToUpload;

    protected override async Task OnInitializedAsync()
    {
        bookList = await Http.GetFromJsonAsync<List<Book>>("api/book");

        genres = await Http.GetFromJsonAsync<List<Genre>>("api/genre");
        publishers = await Http.GetFromJsonAsync<List<Publisher>>("api/publisher");
        seriesList = await Http.GetFromJsonAsync<List<Serie>>("api/Serie");
    }

    private async Task RowInserted(SavedRowItem<Book, Dictionary<string, object>> e)
    {
        var newBook = e.Item;
        var response = await Http.PostAsJsonAsync("api/book", newBook);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private async Task RowUpdated(SavedRowItem<Book, Dictionary<string, object>> e)
    {
        var book = e.Item;
        book.Image = fileToUpload.Name;
        var response = await Http.PutAsJsonAsync($"api/book/{book.Id}", book);

        await UploadImage();

        if (!response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private async Task RowRemoved(Book Book)
    {
        var response = await Http.DeleteAsync($"api/book/{Book.Id}");
        if (response.IsSuccessStatusCode)
        {
            bookList.Remove(Book);
        }
    }

    async Task OnChanged(FileChangedEventArgs e)
    {
        try
        {
            foreach (var file in e.Files)
            {
                // A stream is going to be the destination stream we're writing to.
                using (var stream = new MemoryStream())
                {
                    // Here we're telling the FileEdit where to write the upload result
                    await file.WriteToStreamAsync(stream);

                    // Once we reach this line it means the file is fully uploaded.
                    // In this case we're going to offset to the beginning of file
                    // so we can read it.
                    stream.Seek(0, SeekOrigin.Begin);

                    // Use the stream reader to read the content of uploaded file,
                    // in this case we can assume it is a textual file.
                    using (var reader = new StreamReader(stream))
                    {
                        fileContent = await reader.ReadToEndAsync();
                    }
                }
                fileToUpload = file;
            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    private async Task UploadImage()
    {
        using (var content = new MultipartFormDataContent())
        {
            using (var stream = fileToUpload.OpenReadStream(long.MaxValue))
            {
                // Crear el contenido para el archivo
                var fileContent = new StreamContent(stream);
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
                // Agregar el archivo al formulario con el nombre del campo "File"
                content.Add(fileContent, "File", fileToUpload.Name);

                // Enviar la solicitud al servidor
                var response = await Http.PostAsync("api/images/upload-image", content);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("File uploaded successfully");
                }
                else
                {
                    Console.WriteLine($"Error uploading file: {response.StatusCode}");
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Server response: {errorContent}");
                }
            }
        }
    }
}
